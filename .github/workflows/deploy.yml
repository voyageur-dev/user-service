name: Deploy Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy'
        required: true
        default: 'int'
        type: choice
        options:
          - int
          - prod

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=int" >> $GITHUB_OUTPUT
          fi

      - name: Display selected environment
        run: |
          echo "Selected environment: ${{ steps.set-env.outputs.environment }}"

  deploy:
    needs: set-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: UserServiceFunction
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and Test
        run: ./gradlew build test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_INFRA_ADMIN_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_INFRA_ADMIN_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ vars.REPO_NAME }}-${{ needs.set-environment.outputs.environment }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to lambda
        id: deploy-lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.REPO_NAME }}-${{ needs.set-environment.outputs.environment }}
          IMAGE_TAG: latest
        run: |
          # Update function code
          aws lambda update-function-code \
            --function-name ${{ vars.REPO_NAME }}-${{ needs.set-environment.outputs.environment }} \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Update function configuration and tags
          aws lambda tag-resource \
            --resource arn:aws:lambda:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:function:${{ vars.REPO_NAME }}-${{ needs.set-environment.outputs.environment }} \
            --tags \
              Environment=${{ needs.set-environment.outputs.environment }} \
              Project=user-service

          # Update function configuration
          aws lambda update-function-configuration \
            --function-name ${{ vars.REPO_NAME }}-${{ needs.set-environment.outputs.environment }} \
            --environment "Variables={
              UserPoolId=${{ vars.COGNITO_USER_POOL_ID }}
            }"
